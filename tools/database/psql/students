CREATE TYPE user_role AS enum
(
	'user','student','employee','teacher', 'admin'
);

CREATE TYPE user_status AS enum
(
	'unblocked','blocked'
);

CREATE TABLE users(
	user_id INTEGER GENERATED ALWAYS AS IDENTITY,
	username VARCHAR(70) UNIQUE,
	email VARCHAR(70) UNIQUE,
	password TEXT NOT NULL,
	registered_at TIMESTAMP DEFAULT NOW(),
	last_visit_at TIMESTAMP DEFAULT NOW(),
	blocked user_status DEFAULT 'unblocked',
	role user_role NOT NULL,
	CONSTRAINT pk_users_user_id PRIMARY KEY(user_id),
	CONSTRAINT chk_users_username CHECK (LENGTH(username) >= 5),
	CONSTRAINT chk_users_email CHECK(email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$')
);

CREATE TABLE people(
	person_id INTEGER GENERATED ALWAYS AS IDENTITY,
	user_id INTEGER UNIQUE,
	name VARCHAR(35) NOT NULL,
	surname VARCHAR(35) NOT NULL,
	birth_date DATE NOT NULL,
	phone VARCHAR(13) UNIQUE,
	address VARCHAR(120),
	photo BYTEA,
	notes TEXT,
	CONSTRAINT pk_people_person_id PRIMARY KEY(person_id),
	CONSTRAINT fk_people_users FOREIGN KEY (user_id) REFERENCES users(user_id),
	CONSTRAINT chk_people_name CHECK (LENGTH(name) > 1),
	CONSTRAINT chk_people_surname CHECK (LENGTH(surname) > 1),
	CONSTRAINT chk_people_phone CHECK (phone ~ '^\\+')
);

CREATE TABLE employees(
	employee_id INTEGER GENERATED ALWAYS AS IDENTITY,
	person_id INTEGER NOT NULL,
	title VARCHAR(70) NOT NULL,
	salary NUMERIC,
	hire_date DATE,
	CONSTRAINT pk_employees_employee_id PRIMARY KEY(employee_id),
	CONSTRAINT fk_employees_people FOREIGN KEY (person_id) REFERENCES people(person_id)
);

CREATE TABLE teachers(
	teacher_id INTEGER GENERATED ALWAYS AS IDENTITY,
	employee_id INTEGER NOT NULL,
	CONSTRAINT pk_teachers_teacher_id PRIMARY KEY(teacher_id),
	CONSTRAINT fk_teachers_employees FOREIGN KEY (employee_id) REFERENCES employees(employee_id)
);

CREATE TABLE faculties(
	faculty_id VARCHAR(10) UNIQUE,
	full_name VARCHAR (175) UNIQUE,
	CONSTRAINT pk_faculties_faculty_id PRIMARY KEY (faculty_id)
);

CREATE TABLE specialties (
	specialty_id INTEGER UNIQUE,
	faculty_id VARCHAR(10) NOT NULL,
	full_name VARCHAR(175) UNIQUE,
	CONSTRAINT pk_specialties_specialty_id PRIMARY KEY(specialty_id),
	CONSTRAINT fk_specialties_faculties FOREIGN KEY(faculty_id) REFERENCES faculties(faculty_id)
);

CREATE TYPE educational_level AS enum(
	'bachelor', 'master', 'doctor'
);
CREATE TABLE groups(
	group_id VARCHAR(25) UNIQUE,
	specialty_id  INTEGER NOT NULL,
	full_name VARCHAR(125) UNIQUE,
	educational_level educational_level NOT NULL,
	start_year DATE NOT NULL,
	end_year DATE NOT NULL,
	CONSTRAINT pk_groups_group_id PRIMARY KEY (group_id),
	CONSTRAINT fk_groups_specialties FOREIGN KEY(specialty_id) REFERENCES specialties(specialty_id)
);

CREATE TABLE students(
	student_id INTEGER GENERATED ALWAYS AS IDENTITY,
	person_id INTEGER UNIQUE,
	group_id VARCHAR(25) NOT NULL,
	CONSTRAINT pk_students_student_id PRIMARY KEY(student_id),
	CONSTRAINT fk_students_people FOREIGN KEY (person_id) REFERENCES people(person_id),
	CONSTRAINT fk_students_groups FOREIGN KEY (group_id) REFERENCES groups(group_id)
);

CREATE TABLE subjects(
	subject_id INTEGER GENERATED ALWAYS AS IDENTITY,
	specialty_id INTEGER,
	name VARCHAR(70) UNIQUE,
	CONSTRAINT pk_subjects_subject_id PRIMARY KEY(subject_id),
	CONSTRAINT fk_subjects_specialties FOREIGN KEY(specialty_id) REFERENCES specialties(specialty_id)
);

CREATE TYPE lesson_type AS enum
(
	'lecture','practical','laboratory','session'
);

CREATE TABLE lessons(
	lesson_id BIGINT GENERATED ALWAYS AS IDENTITY,
	teacher_id INTEGER NOT NULL,
	subject_id INTEGER NOT NULL,
	group_id VARCHAR(25) NOT NULL,
	lecture_room VARCHAR(25) NOT NULL,
	time_start TIMESTAMP NOT NULL,
	time_end TIMESTAMP NOT NULL,
	lesson_type lesson_type NOT NULL,
	CONSTRAINT pk_lessons_lesson_id PRIMARY KEY(lesson_id),
	CONSTRAINT fk_lessons_teachers FOREIGN KEY(teacher_id) REFERENCES teachers(teacher_id),
	CONSTRAINT fk_lessons_subjects FOREIGN KEY(subject_id) REFERENCES subjects(subject_id),
	CONSTRAINT fk_lessons_groups FOREIGN KEY(group_id) REFERENCES groups(group_id)
);

CREATE TABLE faculties_employees(
	faculty_id VARCHAR(10) REFERENCES faculties(faculty_id),
	employee_id INTEGER REFERENCES employees(employee_id),
	CONSTRAINT ck_faculties_employees PRIMARY KEY(faculty_id, employee_id)
);

CREATE TABLE teachers_subjects (
    teacher_id INTEGER REFERENCES teachers(teacher_id),
    subject_id INTEGER REFERENCES subjects(subject_id),
    CONSTRAINT ck_teachers_subjects PRIMARY KEY(teacher_id, subject_id)
);

CREATE TABLE refresh_tokens(
	refresh_token_id INTEGER GENERATED ALWAYS AS IDENTITY,
	user_id INTEGER UNIQUE,
	token VARCHAR(255) NOT NULL UNIQUE,
	expires_at TIMESTAMP NOT NULL,
	CONSTRAINT pk_refresh_tokens_refresh_token_id PRIMARY KEY(refresh_token_id),
	CONSTRAINT fk_refresh_tokens_users FOREIGN KEY(user_id) REFERENCES users(user_id)
)

CREATE TABLE complaints(
	complaint_id BIGINT GENERATED ALWAYS AS IDENTITY,
	reporting_user_id INTEGER NOT NULL, 
	reported_user_id INTEGER NOT NULL,
	cause text NOT NULL,
	time TIMESTAMP DEFAULT NOW()
	 text,
	CONSTRAINT pk_complaints_complaint_id PRIMARY KEY(complaint_id),
	CONSTRAINT fk_complaints_users_reporting_user_id FOREIGN KEY(reporting_user_id) REFERENCES users(user_id),
	CONSTRAINT fk_complaints_users_reported_user_id FOREIGN KEY(reported_user_id) REFERENCES users(user_id),
)

CREATE TABLE block_users_audit(
    id BIGINT GENERATED ALWAYS AS IDENTITY,
	complaint_id INTEGER NOT NULL,
    admin_id INTEGER NOT NULL,
    operation user_status NOT NULL,
    CONSTRAINT pk_block_users_audit_id PRIMARY KEY(id),
    CONSTRAINT fk_block_users_audit_users_admin_id FOREIGN KEY(admin_id) REFERENCES users(user_id),
    CONSTRAINT fk_block_users_audit_complaints FOREIGN KEY(complaint_id) REFERENCES complaints(complaint_id)
);
